version: '{branch}-{build}'

shallow_clone: true

environment:

    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\tests\\appveyor\\run_with_env.cmd"

    matrix:

    - JOB: "2.7 32-bit"
      TOXENV: "py27"
      PYTHON: "C:\\Python27.10"
      PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "32"

    - JOB: "3.3 32-bit"
      TOXENV: "py33"
      PYTHON: "C:\\Python33"
      PYTHON_VERSION: "3.3"
      PYTHON_ARCH: "32"

    - JOB: "3.4 32-bit"
      TOXENV: "py34"
      PYTHON: "C:\\Python34"
      PYTHON_VERSION: "3.4"
      PYTHON_ARCH: "32"

    - JOB: "3.5 32-bit"
      TOXENV: "py35"
      PYTHON: "C:\\Python35"
      PYTHON_VERSION: "3.5"
      PYTHON_ARCH: "32"

cache:
    # Cache created Python .whl packages to avoid compiling them again.
    # Wheels are built with --use-wheel to avoid recompiling already-built wheels.
    - C:\wheels

init:
    - "ECHO %PYTHON% %PYTHON_VERSION% %PYTHON_ARCH%"

install:
    - ps: if (-not(Test-Path($env:PYTHON))) { & tests\appveyor\install.ps1 }

    # Prepend newly installed Python to the PATH of this build (this cannot be
    # done from inside the powershell script as it would require to restart
    # the parent CMD process).
    - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

    # Check that we have the expected version and architecture for Python
    - "python --version"
    - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

    # Upgrade to the latest version of pip to avoid it displaying warnings
    # about it being out of date.
    - "pip install --disable-pip-version-check --user --upgrade pip"

    # Create .whl packages from dependencies for possible caching.
    # First install 'wheel' package to be able create .whl files.
    - "%CMD_IN_ENV% pip install wheel tox"

    # Create c:/wheels if it does not exist.
    - ps: If ( -not (Test-Path C:/wheels) )  { mkdir C:/wheels }

    - ECHO "Cached wheels:"
    - ps: "ls \"C:/wheels\""

    # Create .whl packages from dependencies for possible caching.
    # If some dependencies contain
    # compiled extensions and are not provided as pre-built wheel packages,
    # pip will build them from source using the MSVC compiler matching the
    # target Python version and architecture
    # If we have previously built a wheel and stored it in C:/wheels,
    # the --find-links option will find the previously built wheel and
    # skip rebuilding it. The wheel will still be rebuilt if a newer version is
    # available on PyPI.
    # TODO: remove out-of-date wheels to avoid overflowing the build cache
    - "%CMD_IN_ENV% pip wheel --use-wheel --wheel-dir C:/wheels --find-links c:/wheels -r requirements.txt"
    - "%CMD_IN_ENV% pip wheel --use-wheel --wheel-dir C:/wheels --find-links c:/wheels -r dev/requirements.txt"
#
build: none

test_script:
    # Split tests into several subprocesses.
    - "%CMD_IN_ENV% %PYTHON%\\Scripts\\tox"